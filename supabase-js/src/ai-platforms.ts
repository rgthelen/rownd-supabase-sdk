/**
 * Rownd + Supabase Integration for AI Platforms
 * 
 * This module provides easy-to-use exports for AI-driven platforms like Lovable
 * to integrate Rownd authentication with Supabase.
 */

import { PROXY_FUNCTION_CODE } from './proxy';

/**
 * Complete setup instructions for AI platforms
 */
export const AI_PLATFORM_SETUP = {
  frontend: {
    description: "Frontend setup for React/Next.js apps",
    steps: [
      "1. Install the package: npm install @rownd/supabase-js",
      "2. Replace your Supabase import:",
      "   FROM: import { createClient } from '@supabase/supabase-js'",
      "   TO:   import { createClient } from '@rownd/supabase-js'",
      "3. Add Rownd token getter when creating client:",
      "   const { getAccessToken } = useRownd()",
      "   const supabase = createClient(url, key, { getAccessToken })",
      "4. That's it! Use Supabase normally."
    ],
    example: `
import { createClient } from '@rownd/supabase-js'
import { useRownd } from '@rownd/react'

const { getAccessToken } = useRownd()
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, { getAccessToken })

// Use exactly like standard Supabase
const { data } = await supabase.from('todos').select('*')
`
  },
  
  backend: {
    description: "Backend setup for Edge Functions",
    steps: [
      "1. Create a new Edge Function named: _rownd_universal_proxy",
      "2. Copy the PROXY_FUNCTION_CODE below into the function",
      "3. Deploy the function",
      "4. For other Edge Functions, just change the import:",
      "   FROM: import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'",
      "   TO:   import { serve } from '@rownd/supabase-edge'"
    ],
    proxyFunctionCode: PROXY_FUNCTION_CODE,
    example: `
import { serve } from '@rownd/supabase-edge'

serve(async (req, { userId, supabase }) => {
  // userId is automatically provided!
  const { data } = await supabase
    .from('todos')
    .select('*')
    .eq('user_id', userId)
  
  return new Response(JSON.stringify({ data }))
})
`
  }
};

/**
 * Get a complete Edge Function file content
 * @param functionName - Name of the function (e.g., 'get-todos')
 * @param handler - The handler code as a string
 */
export function generateEdgeFunction(functionName: string, handler: string): string {
  return `// @ts-nocheck
/**
 * ${functionName} - Rownd authenticated Edge Function
 * Auto-generated by @rownd/supabase-js
 */

import { serve } from '@rownd/supabase-edge'

${handler}
`;
}

/**
 * Generate the proxy function file content
 */
export function generateProxyFunction(): string {
  return PROXY_FUNCTION_CODE;
}

/**
 * Quick setup code snippets for common scenarios
 */
export const QUICK_SNIPPETS = {
  // Frontend: Create authenticated Supabase client
  createClient: `
import { createClient } from '@rownd/supabase-js'
import { useRownd } from '@rownd/react'

const { getAccessToken } = useRownd()
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  { getAccessToken }
)
`,

  // Backend: Simple authenticated Edge Function
  simpleEdgeFunction: `
import { serve } from '@rownd/supabase-edge'

serve(async (req, { userId, supabase }) => {
  // Your code here - userId is automatically available
  return new Response(JSON.stringify({ userId }))
})
`,

  // Backend: CRUD Edge Function
  crudEdgeFunction: `
import { serve } from '@rownd/supabase-edge'

serve(async (req, { userId, supabase }) => {
  const { method } = req
  
  switch (method) {
    case 'GET':
      const { data } = await supabase
        .from('items')
        .select('*')
        .eq('user_id', userId)
      return new Response(JSON.stringify({ data }))
      
    case 'POST':
      const body = await req.json()
      const { data: newItem } = await supabase
        .from('items')
        .insert({ ...body, user_id: userId })
        .select()
        .single()
      return new Response(JSON.stringify({ data: newItem }))
      
    default:
      return new Response('Method not allowed', { status: 405 })
  }
})
`
};

/**
 * Complete example app structure for AI platforms
 */
export const EXAMPLE_APP_STRUCTURE = {
  description: "Complete app structure with Rownd + Supabase integration",
  files: {
    // Frontend files
    'src/lib/supabase.ts': QUICK_SNIPPETS.createClient,
    
    // Backend files
    'supabase/functions/_rownd_universal_proxy/index.ts': PROXY_FUNCTION_CODE,
    'supabase/functions/get-todos/index.ts': `
import { serve } from '@rownd/supabase-edge'

serve(async (req, { userId, supabase }) => {
  const { data, error } = await supabase
    .from('todos')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false })
  
  if (error) {
    return new Response(JSON.stringify({ error: error.message }), { status: 400 })
  }
  
  return new Response(JSON.stringify({ data }))
})
`,
    
    // Database migration
    'supabase/migrations/001_create_todos.sql': `
-- Create todos table with RLS
CREATE TABLE todos (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id TEXT NOT NULL,
  title TEXT NOT NULL,
  completed BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS
ALTER TABLE todos ENABLE ROW LEVEL SECURITY;

-- Create policy for user isolation
CREATE POLICY "Users can only see their own todos"
  ON todos FOR ALL
  USING (user_id = current_setting('request.jwt.claims', true)::json->>'sub');

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_todos_updated_at BEFORE UPDATE
  ON todos FOR EACH ROW EXECUTE PROCEDURE update_updated_at_column();
`
  }
};

/**
 * Export everything AI platforms need
 */
export default {
  setup: AI_PLATFORM_SETUP,
  generateEdgeFunction,
  generateProxyFunction,
  snippets: QUICK_SNIPPETS,
  exampleApp: EXAMPLE_APP_STRUCTURE,
  proxyFunctionCode: PROXY_FUNCTION_CODE
}; 